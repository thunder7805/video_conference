/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Connection } from "./Connection";
import { ConnectionCountArgs } from "./ConnectionCountArgs";
import { ConnectionFindManyArgs } from "./ConnectionFindManyArgs";
import { ConnectionFindUniqueArgs } from "./ConnectionFindUniqueArgs";
import { CreateConnectionArgs } from "./CreateConnectionArgs";
import { UpdateConnectionArgs } from "./UpdateConnectionArgs";
import { DeleteConnectionArgs } from "./DeleteConnectionArgs";
import { Room } from "../../room/base/Room";
import { User } from "../../user/base/User";
import { ConnectionService } from "../connection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Connection)
export class ConnectionResolverBase {
  constructor(
    protected readonly service: ConnectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Connection",
    action: "read",
    possession: "any",
  })
  async _connectionsMeta(
    @graphql.Args() args: ConnectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Connection])
  @nestAccessControl.UseRoles({
    resource: "Connection",
    action: "read",
    possession: "any",
  })
  async connections(
    @graphql.Args() args: ConnectionFindManyArgs
  ): Promise<Connection[]> {
    return this.service.connections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Connection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Connection",
    action: "read",
    possession: "own",
  })
  async connection(
    @graphql.Args() args: ConnectionFindUniqueArgs
  ): Promise<Connection | null> {
    const result = await this.service.connection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Connection)
  @nestAccessControl.UseRoles({
    resource: "Connection",
    action: "create",
    possession: "any",
  })
  async createConnection(
    @graphql.Args() args: CreateConnectionArgs
  ): Promise<Connection> {
    return await this.service.createConnection({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Connection)
  @nestAccessControl.UseRoles({
    resource: "Connection",
    action: "update",
    possession: "any",
  })
  async updateConnection(
    @graphql.Args() args: UpdateConnectionArgs
  ): Promise<Connection | null> {
    try {
      return await this.service.updateConnection({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Connection)
  @nestAccessControl.UseRoles({
    resource: "Connection",
    action: "delete",
    possession: "any",
  })
  async deleteConnection(
    @graphql.Args() args: DeleteConnectionArgs
  ): Promise<Connection | null> {
    try {
      return await this.service.deleteConnection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  @nestAccessControl.UseRoles({
    resource: "Room",
    action: "read",
    possession: "any",
  })
  async getRoom(@graphql.Parent() parent: Connection): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Connection): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
